#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    Copyright (C) 2015 Mathieu D. (MatToufoutu)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import os
from argparse import ArgumentParser
try:
    import simplejson as json
except ImportError:
    import json

from ToolBoxAssistant.app import AppFactory
from ToolBoxAssistant.log import get_logger


class ToolBoxAssistant(object):
    """
    The main class
    """
    config_basedir = os.path.join(os.path.expanduser('~'), '.tba')
    tba_required_fields = ['path', 'apps']
    app_required_fields = ['type', 'url', 'path']

    def __init__(self):
        self.log = get_logger('tba')
        self.config_dir = None
        self.args = None

    @staticmethod
    def find_versionned_folders(path):
        for root, subdirs, files in os.walk(path):
            for cvsdir in ('.git', '.svn', '.hg'):
                if cvsdir in subdirs:
                    yield root
                    break

    def setup_config_dir(self, path):
        self.config_dir = os.path.join(
            self.config_basedir,
            path.replace(os.path.sep, '_').strip('_')
        )
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)

    def load_specs(self, fpath):
        """
        Loads a specifications file and checks for missing fields.
        """
        with open(fpath) as ifile:
            data = json.load(ifile)
        for field in self.tba_required_fields:
            if field not in data:
                self.log.error('missing top-level field in specs: %s' % field)
                return None
        for app_name in data['apps']:
            app_specs = data['apps'][app_name]
            for app_field in self.app_required_fields:
                if app_field not in app_specs:
                    self.log.error('missing app field in specs: %s' % app_field)
                    return None
        return data

    def do_sync(self):
        """
        Synchronizes installed application with the specfile:
        """
        if (not os.path.exists(self.args.file)) or (not os.path.isfile(self.args.file)):
            self.log.error('File not found: %s' % self.args.file)
            return
        specs = self.load_specs(self.args.file)
        if specs is None:
            return
        self.setup_config_dir(specs['path'])
        rootpath = specs['path']
        for app_name in specs['apps']:
            app_specs = specs['apps'][app_name]
            if not app_specs['path'].startswith(os.path.sep):
                app_specs['path'] = os.path.join(rootpath, app_specs['path'])
            app = AppFactory.load(self, app_name, app_specs)
            app.sync()
            if app.is_updated:
                app.build()
        if self.args.unlisted:
            for folder in self.find_versionned_folders(rootpath):
                folder, app_name = os.path.split(folder)
                self.log.warn('found unlisted application in %s: %s' % (folder, app_name))

    def do_genspec(self):
        """
        Scans current folder for versionned applications and
        creates a specfile accordingly.
        """
        raise NotImplementedError

    def run(self):
        """
        Main entry-point.
        """
        parser = ArgumentParser(description='Easily manage your toolbox applications.')
        parser.add_argument(
            '-f', '--file',
            help='toolbox specfile to use (default: toolbox.json)',
            default='toolbox.json'
        )
        subparsers = parser.add_subparsers(
            title='Subcommands',
            help='(use "%(prog)s <cmd> -h" for commands help)',
            dest='action'
        )

        sync_parser = subparsers.add_parser(
            'sync',
            help='synchronize installed applications with specfile'
        )
        sync_parser.add_argument(
            '-u', '--unlisted',
            help='list installed applications missing from specfile',
            action='store_true'
        )
        sync_parser.add_argument(
            '-v', '--verbose',
            help='display external commands output',
            action='store_true'
        )
        sync_parser.set_defaults(func=self.do_sync)

        genspec_parser = subparsers.add_parser(
            'genspec',
            help='generate specfile from installed applications (NOT IMPLEMENTED YET)'
        )
        genspec_parser.add_argument(
            'path',
            help='toolbox folder to scan for applications'
        )
        genspec_parser.add_argument(
            '-m', '--merge',
            help='merge found applications with existing specfile',
            metavar='FILE'
        )
        genspec_parser.set_defaults(func=self.do_genspec)

        args = parser.parse_args()
        if not args.file.startswith(os.path.sep):
            args.file = os.path.join(os.getcwd(), args.file)
        self.args = args
        self.args.func()


if __name__ == '__main__':
    tba = ToolBoxAssistant()
    tba.run()
